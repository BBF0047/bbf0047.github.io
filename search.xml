<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python-基本数据类型]]></title>
    <url>%2F2018%2F10%2F21%2FPython-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[变量 Python 中的变量不需要声明，每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 Python 中变量就是变量，它没有类型，所说的“类型”是变量所指的内存对象的类型。 123counter = 100 # 整形变量miles = 1000.0 # 浮点型变量name = "Apple" # 字符串 备注：等号 = 用来给变量赋值。等号 = 运算符左边是一个变量名，等号 = 运算符右边是存储在变量中的值。 多个变量 Python 允许你同时为多个变量赋值。 创建一个整型对象，值为 1 ，从后向前赋值，三个变量都指向同一个内存地址。 1a = b = c = 1 也可以为多个对象指定多个变量。 两个整型对象 1 和 2 的分配给变量 a 和 b ， 字符串对象 “Apple” 分配给变量 c 。 1a, b, c = 1, 2, "Apple" 标准数据类型Python3 中有六个标准的数据类型： Number （数字） String （字符串） List （列表） Tuple （元组） Set （集合） Dictionary （字典） Python3 的六个标准数据类型中： 不可变数据： Number（数字） 、 String（字符串） 、 Tuple（元组） 可变数据： List（列表） 、 Dictionary（字典） 、 Set（集合） Number（数字） Python3 支持 int 、 float 、 bool 、 complex（复数）。 Python3 里只有一种整数类型 int ，表示长整型，没有 Python2 中的 Long 。 与大多数语言一样，数值类型的赋值和计算都是很直观的。内置的 type() 函数可以用来查询变量所指的对象类型。 123&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt; 还可以用 isinstance 来判断 123&gt;&gt;&gt; a = 11&gt;&gt;&gt; isinstance(a,int)True isinstance 和 type 的区别 12345678910class A: passclass B(A): passisinstance(A(), A) # returns Truetype(A()) == A # returns Trueisinstance(B(), A) # returns Truetype(B()) == A # returns False 区别就是： type() 不会认为子类是一种父类类型。 isinstance() 会认为子类是一种父类类型。 注意：在 Python2 中没有布尔型的，它用数字 0 表示 False ， 用 1 表示 True 。 到 Python3 中，把 True 和 False 定义成关键字了。但它们的值还是 1 和 0 ，它们可以和数字相加。 当指定一个值时，Number 对象就会被创建。 12var1 = 1var2 = 10 也可以使用 del 语句删除一些对象引用 del语法： 1del var1[,var2[,var3[......,varN]]] del语句删除单个或多个对象： 12del var1del var1,var2 数值运算 实例 1234567891011121314&gt;&gt;&gt; 5 + 4 # 加法9&gt;&gt;&gt; 4.3 - 2 # 减法2.3&gt;&gt;&gt; 3 * 7 # 乘法21&gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数0.5&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数0&gt;&gt;&gt; 17 % 3 # 取余2&gt;&gt;&gt; 2 ** 5 # 乘法32 注意： Python 可以同时为多个变量赋值。 一个变量可以通过赋值指向不同类型的对象。 数值的除法包含两个运算符：/ 返回一个浮点数，//返回一个整数。 混合计算时，Python 会把整型转换成浮点数。 数值类型实例 int float complex 10 0.0 3.14j 100 15.20 45.j -786 -21.9 9.322e-36j 080 32.3e+18 .876j -0490 -90. -.6545+0J -0x260 -32.54e100 3e+26J 0x69 70.2E-12 4.53e-7j Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 comples(a,b)表示，复数的实部 a 和虚部 b 都是浮点型。 String（字符串） Python 中的字符串单引号 &#39; 或双引号 &quot; 括起来，同时使用反斜杠 \ 转义特殊字符。 字符串的截取语法格式如下： 1变量[头下标：尾下标] 索引值以 0 为开始值，-1 为从末尾的开始位置。 1234567从后面索引： -6 -5 -4 -3 -2 -1从前面索引： 0 1 2 3 4 5 +---+---+---+---+---+---+ | a | b | c | d | e | f | +---+---+---+---+---+---+从前面截取： : 1 2 3 4 5 :从后面截取： : -5 -4 -3 -2 -1 : 加号 + 是字符串的连接符，星号 * 表示复制当前字符串，紧跟的数字为复制的次数。 123456789str = 'Runoob'print (str) # 输出字符串print (str[0:-1]) # 输出第一个到倒数第二个的所有字符print (str[0]) # 输出字符串第一个字符print (str[2:5]) # 输出从第三个开始到第五个的字符print (str[2:]) # 输出从第三个开始的后的所有字符print (str * 2) # 输出字符串两次print (str + "TEST") # 连接字符串 执行以上程序会输出如下结果： 1234567RunoobRunooRnoonoobRunoobRunoobRunoobTEST Python 使用反斜杠 \ 转义特殊字符，如果不想让反斜杠发生转义，可以在字符串前加一个 r ，表示原始字符串。 12345&gt;&gt;&gt; print("He\nllo")Hello&gt;&gt;&gt; print(r"He\nllo")He\nllo 另外，反斜杠 \ 可以作为续行符，表示下一行是上一行的延续，也可以使用 &quot;&quot;&quot;...&quot;&quot;&quot; 或者 &#39;&#39;&#39;...&#39;&#39;&#39; 跨越多行。 Python 没有单独的字符类型，一个字符就是长度为1的字符串。与 C 字符串不同的是， Python 字符串不能被改变。向一个索引位置赋值，比如 name[0] = &quot;m&quot; 会导致错误。 12345&gt;&gt;&gt; name = "Python"&gt;&gt;&gt; print(name[0],name[5])P n&gt;&gt;&gt; print(name[-1],name[-4])n t 注意： 反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 字符串可以用（+）运算符连接在一起，用（*）运算符重复。 Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。 Python 中的字符串不能改变。 List（列表） List（列表），是Python中使用最频繁的数据类型，列表可以完成大多数集合类的数据结构实现，列表中元素的类型可以不相同，它支持数字和字符串，甚至还可以包含列表（所谓嵌套）。 列表是写在方括号 [] 之间，用逗号分隔开的元素列表，与字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。 列表截取的语法格式如下： 1变量[头下标：尾下标] 索引值以 0 为开始值， -1 为从末尾的开始位置。 加号 （+） 是列表连接运算符，星号 （*） 是重复操作。 123456789list1 = ['abcd', 789, 10.2, 'Apple', 50.3]list2 = [852, 'Apple']print(list1) # 输出完整列表print(list1[0]) # 输出列表第一个元素print(list1[1:3]) # 输出列表中第二个元素到第三个元素print(list1[2:]) # 输出从第三个元素开始的所有元素print(list2 * 2) # 输出两次列表print(list1 + list2) # 连接列表 输出结果： 123456['abcd', 789, 10.2, 'Apple', 50.3]abcd[789, 10.2][10.2, 'Apple', 50.3][852, 'Apple', 852, 'Apple']['abcd', 789, 10.2, 'Apple', 50.3, 852, 'Apple'] 与 Python 字符串不一样的是，列表中的元素是可以改变。 List内置了很多方法，例如： append() 、 pop() 等等。 12345678&gt;&gt;&gt; s = [1, 2, 3, 4, 5, 6]&gt;&gt;&gt; s[0] = 7&gt;&gt;&gt; s[2:5] = [8, 9, 10]&gt;&gt;&gt; s[7, 2, 8, 9, 10, 6]&gt;&gt;&gt; s[2:5] = [] #将对应的元素值设置为 []&gt;&gt;&gt; s[7, 2, 6] 注意： List 写在方括号之间。元素用逗号隔开。 与字符串一样， List 可以被索引和切片。 List 可以使用 + 操作符进行拼接。 List 中的元素可以改变的。 Tuple（元组） 元组（Tuple）与列表类似，不同之处在于元组的元素不能修改，元组写在小括号 () 里，元素之间用逗号隔开。元组中的元素类型也可以不相同。 123456789tuple1 = ('abc', 798, 5.12, 'Apple', 45.6)tuple2 = (123, 'Apple')print(tuple1) # 输出完整元组print(tuple1[0]) # 输出元组的第一个元素print(tuple1[1:3]) # 输出从第二个元素开始到第三个元素print(tuple1[2:]) # 输出从第三个元素开始的所有元素print(tuple2 * 2) # 输出两次元组print(tuple1 + tuple2) # 连接元组 输出结果： 123456('abc', 798, 5.12, 'Apple', 45.6)abc(798, 5.12)(5.12, 'Apple', 45.6)(123, 'Apple', 123, 'Apple')('abc', 798, 5.12, 'Apple', 45.6, 123, 'Apple') 元组与字符串类似，可以被索引且下标索引从 0 开始， -1 为从末尾开始的位置。也可以进行截取。 其实，可以把字符串看作一种特殊的元组。 123456789&gt;&gt;&gt;tup = (1, 2, 3, 4, 5, 6)&gt;&gt;&gt; print(tup[0])1&gt;&gt;&gt; print(tup[1:5])(2, 3, 4, 5)&gt;&gt;&gt; tup[0] = 11 # 修改元组元素的操作是非法的Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: 'tuple' object does not support item assignment 虽然 tuple 的元素不可改变，但它可以包含可变对象，比如 list 列表。 构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则： 12tup1 = () # 空元组tup2 = (20,) # 一个元素，需要在元素后添加逗号 string、list和tuple都属于sequence（序列）。 注意： 与字符串一样，元组的元素不可修改。 元组可以被索引和切片。 注意构造包含 0 或 1 个元素的元组的特殊语法规则。 元组也可以使用 + 操作符进行拼接。 Set（集合） 集合（Set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。 基本功能是进行成员关系测试和删除重复元素，可以使用大括号 {} 或者 set() 函数创建集合，创建一个空集合必须用 set() 而不是 {} ，因为 {} 是用来创建一个空字典。 创建格式： 123parame = &#123;value01,value02,...&#125;或者set(value) 实例 12345678910111213141516171819202122232425262728student = &#123;'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'&#125;# 输出集合，重复的元素被自动去掉。print(student)# 成员测试if 'Rose' in student: print('Rose 在集合中')else: print('Rose 不在集合中')# set 可以进行集合运算a = set('sedgolc')b = set('saetdg')print(a)# a 和 b 的差集print(a - b)# a 和 b 的并集print(a | b)# a 和 b 的交集print(a &amp; b)# a 和 b 不同时存在的元素print(a ^ b) 输出结果： 1234567&#123;'Mary', 'Rose', 'Jim', 'Jack', 'Tom'&#125;Rose 在集合中&#123;'s', 'g', 'e', 'c', 'l', 'o', 'd'&#125;&#123;'c', 'l', 'o'&#125;&#123;'t', 's', 'g', 'e', 'c', 'l', 'o', 'd', 'a'&#125;&#123;'d', 'g', 'e', 's'&#125;&#123;'t', 'o', 'l', 'a', 'c'&#125; Dictionary（字典） 字典（Dictionary）是 Python 中另一个非常有用的内置数据类型，列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 字典是一种映射类型，字典用 {} 标识，它是一个无序的键（key）：值（value）对集合。键（key）必须使用不可变类型，在同一个字典中，键（key）必须是唯一的。 1234567891011dict = &#123;&#125;dict['one'] = "1 - Hello"dict[2] = "2 - Word"tinydict = &#123;'name': 'Apple','code':1, 'site': 'Apple.cn'&#125;print(dict['one']) # 输出键为 'one' 的值print(dict[2]) # 输出键为 2 的值print(tinydict) # 输出完整的字典print(tinydict.keys()) # 输出所有键print(tinydict.values()) # 输出所有值 输出结果： 123451 - Hello2 - Word&#123;'name': 'Apple', 'code': 1, 'site': 'Apple.cn'&#125;dict_keys(['name', 'code', 'site'])dict_values(['Apple', 1, 'Apple.cn']) 构建函数 dict() 可以直接从键值对序列中构建字典。 字典类型也有一些内置的函数，列如： clear() 、 keys() 、 values() 等等。 12345678&gt;&gt;&gt;dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])&#123;'Taobao': 3, 'Runoob': 1, 'Google': 2&#125;&gt;&gt;&gt; &#123;x: x**2 for x in (2, 4, 6)&#125;&#123;2: 4, 4: 16, 6: 36&#125;&gt;&gt;&gt; dict(Runoob=1, Google=2, Taobao=3)&#123;'Runoob': 1, 'Google': 2, 'Taobao': 3&#125; 注意： 字典是一种映射类型，它的元素是键值对。 字典的关键字必须为不可变类型，且不能重复。 创建空字典使用 {} 。 Python 数据类型转换 有时我们需要对数据内置的类型进行转换，数据类型的转换，只需要将数据类型作为函数名即可。 以下几个内置的函数可以执行数据类型之间的转换，这些函数返回一个新的对象，表示转换的值。 函数 描述 int(x [,base]) 将x转换为一个整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个序列 (key,value)元组。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串]]></content>
      <categories>
        <category>编程之道</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-基础语法]]></title>
    <url>%2F2018%2F10%2F20%2FPython-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[编码 默认情况下，Python3 源码文件以UTF-8编码，所有字符串都是 unicode 字符串。也可为源码文件指定不同的编码。 下述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。 1# -*- coding: cp-1252 -*- 标识符 Python3 中，非ASCII标识符也是允许的。 第一个字符必须是字母表中字母或下划线_。 标识符的其他的部分由字母、数字和下划线组成。 标识符对大小写敏感 Python保留字 保留字即关键字，不能把它们用作任何标识符名称 Python 的标准库提供了一个keyword模块，可以输出当前版本的所有关键字。 123&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释 Python 中单行注释以#开头 12#第一个注释print("Hello Word") 多行注释可以用多个#，或者&#39;&#39;&#39;和&quot;&quot;&quot; 123456789101112#第一个注释#第二个注释'''第三个注释第四个注释'''"""第五个注释第六个注释""" 行与缩进 Python 最具有特色的就是使用缩进进行表示代码块，不需要使用大括号{}。 缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。 1234if True: print("True")else: print("False") 以下代码最后一行语句缩进缩进数的空格数不一致，会导致运行错误。 123456if True: print("Answer") print("True")else: print("Answer") print("False") #缩进不一致，或导致运行错误 以上程序由于缩进不一致，执行后会出现类似以下错误： 1234File "String.py", line 6 print("False") #缩进不一致，或导致运行错误 ^IndentationError: unindent does not match any outer indentation level 多行语句 Python 通常是一行写完一条语句，但如果语句很长，可以使用反斜杠\实现多行语句。 123total = item_one + \ item_two + \ item_three 在[]、{}和()中的多行语句，不需要使用反斜杠\。 1234567891011total_one = ("item_one", "item_two", "item_three")total_two = ["item_one", "item_two", "item_three"]total_three = &#123;"item_one":"item_one", "item_two":"item_two", "item_three":"item_three"&#125; 数字（Number）类型 Python 中数字有四种类型：整数、布尔型、浮点数和复数 int（整数） 如：1 只有一种整数类型 int ,表示为长整型，没有 Python2 中的 Long bool(布尔) 如：True float（浮点数） 如：1.23、3E-2 complex（复数） 如：1 + 2j、1.1 + 2.2j 字符串（String） Python 中单引号和双引号使用完全相同。 使用三引号（&#39;&#39;&#39;或&quot;&quot;&quot;）可以指定一个多行字符串。 转义符\ 反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 按字面意义级联字符串。 字符串可以用 + 运算符连接在一起，用 * 运算符重复。 Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。 Python 中的字符串不能改变。 Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。 字符串的截取语法格式如下： 这里的 r 指 raw ，即 raw string。 1234567891011121314str = 'Runoob'print(str) # 输出字符串print(str[0:-1]) # 输出第一个到倒数第二个的所有字符print(str[0]) # 输出字符串第一个字符print(str[2:5]) # 输出从第三个开始到第五个的字符print(str[2:]) # 输出从第三个开始的后的所有字符print(str * 2) # 输出字符串两次print(str + 'Hello') # 连接字符串print('------------------------------')print('hello\nrunoob') # 使用反斜杠(\)+n转义特殊字符print(r'hello\nrunoob') # 在字符串前面添加一个 r，表示原始字符串，不会发生转义 输出结果为： 1234567891011RunoobRunooRnoonoobRunoobRunoobRunoob你好------------------------------hellorunoobhello\nrunoob 空行 函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。 空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。空行也是程序代码的一部分 等待用户输入 执行下面的程序在按回车键后就会等待用户输入。 以下代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。 1input("\n\n按下 Enter 键后退出程序。") 同一行显示多条语句 Python 可以在同一行中使用多条语句，语句之间使用分号;分割。 1import sys; x = 'runoob'; sys.stdout.write(x + '\n') 多个语句构成代码组 缩进相同的一组语句构成一个代码块，我们称之代码组。 像 if 、 while 、 def 和 class 这样的复合语句，首行以关键字开始，以冒号:结束，该行之后的一行或多行代码构成代码组。我们将首行及后面的代码组称为一个句子（Clause）。 123456if expression: suiteelif expression: suiteelse: suite Print 输出 Print 默认输出是换行的，如果要实现不换行需要在变量末尾加上end=&quot;&quot;。 12345678910111213x="a"y="b"# 换行输出print( x )print( y )print('---------')# 不换行输出print( x, end=" " )print( y, end=" " )print() 以上实例执行结果： 1234ab---------a b import 与 from import 在 Python 用import或者from import来导入相应的模块。 将整个模块(somemodule)导入。格式：import somemodule 从某个模块中导入某个函数。 格式：from somemodule import somefunction 从某个模块中导入多个函数。 格式为：from somemodule import firstfunc, secondfunc, thirdfunc 将某个模块中的全部函数导入。格式：from somemodule import 命令行参数 Python 提供了getout 模块来获取命令行参数。 1python test.py arg1 arg2 arg3 Python 中也可以所用 sys 的 sys.argv 来获取命令行参数 sys.argv 是命令行参数列表。 len(sys.argv) 是命令行参数个数。 注：sys.argv[0] 表示脚本名。 实例test.py 文件代码如下： 1234import sysprint ('参数个数为:', len(sys.argv), '个参数。')print ('参数列表:', str(sys.argv)) 执行以上代码，输出结果为： 123$ python3 test.py arg1 arg2 arg3参数个数为: 4 个参数。参数列表: ['test.py', 'arg1', 'arg2', 'arg3'] getopt模块 getopt模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式-和长选项模式--。 该模块提供了两个方法及一个异常处理来解析命令行参数。 getopt.getopt 方法 getopt.getopt 方法用于解析命令行参数列表，语法格式如下： 1getopt.getopt(args, options[, long_options]) 方法参数说明 args: 要解析的命令行参数列表。 options: 以字符串的格式定义，options后的冒号:表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。 long_options: 以列表的格式定义，long_options 后的等号=表示如果设置该选项，必须有附加的参数，否则就不附加参数。 该方法返回值由两个元素组成: 第一个是 (option, value) 元组的列表。 第二个是参数列表，包含那些没有-或--的参数。 Exception getopt.GetoptError 在没有找到参数列表，或选项的需要的参数为空时会触发该异常。 异常的参数是一个字符串，表示错误的原因。属性 msg 和 opt 为相关选项的错误信息。 实例 假定我们创建这样一个脚本，可以通过命令行向脚本文件传递两个文件名，同时我们通过另外一个选项查看脚本的使用。脚本使用方法如下: 1usage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt; test.py 文件代码如下所示： 1234567891011121314151617181920212223import sys, getoptdef main(argv): inputfile = '' outputfile = '' try: opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="]) except getopt.GetoptError: print ('test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;') sys.exit(2) for opt, arg in opts: if opt == '-h': print ('test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;') sys.exit() elif opt in ("-i", "--ifile"): inputfile = arg elif opt in ("-o", "--ofile"): outputfile = arg print ('输入的文件为：', inputfile) print ('输出的文件为：', outputfile)if __name__ == "__main__": main(sys.argv[1:]) 执行以上代码，输出结果为： 123456$ python3 test.py -husage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;$ python3 test.py -i inputfile -o outputfile输入的文件为： inputfile输出的文件为： outputfile]]></content>
      <categories>
        <category>编程之道</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
