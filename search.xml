<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python-基础语法]]></title>
    <url>%2F2018%2F10%2F20%2FPython-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[编码 默认情况下，Python3 源码文件以UTF-8编码，所有字符串都是 unicode 字符串。也可为源码文件指定不同的编码。 下述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。 1# -*- coding: cp-1252 -*- 标识符 Python3 中，非ASCII标识符也是允许的。 第一个字符必须是字母表中字母或下划线_。 标识符的其他的部分由字母、数字和下划线组成。 标识符对大小写敏感 Python保留字 保留字即关键字，不能把它们用作任何标识符名称 Python 的标准库提供了一个keyword模块，可以输出当前版本的所有关键字。 123&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释 Python 中单行注释以#开头 12#第一个注释print("Hello Word") 多行注释可以用多个#，或者&#39;&#39;&#39;和&quot;&quot;&quot; 123456789101112#第一个注释#第二个注释'''第三个注释第四个注释'''"""第五个注释第六个注释""" 行与缩进 Python 最具有特色的就是使用缩进进行表示代码块，不需要使用大括号{}。 缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。 1234if True: print("True")else: print("False") 以下代码最后一行语句缩进缩进数的空格数不一致，会导致运行错误。 123456if True: print("Answer") print("True")else: print("Answer") print("False") #缩进不一致，或导致运行错误 以上程序由于缩进不一致，执行后会出现类似以下错误： 1234File "String.py", line 6 print("False") #缩进不一致，或导致运行错误 ^IndentationError: unindent does not match any outer indentation level 多行语句 Python 通常是一行写完一条语句，但如果语句很长，可以使用反斜杠\实现多行语句。 123total = item_one + \ item_two + \ item_three 在[]、{}和()中的多行语句，不需要使用反斜杠\。 1234567891011total_one = ("item_one", "item_two", "item_three")total_two = ["item_one", "item_two", "item_three"]total_three = &#123;"item_one":"item_one", "item_two":"item_two", "item_three":"item_three"&#125; 数字（Number）类型 Python 中数字有四种类型：整数、布尔型、浮点数和复数 int（整数） 如：1 只有一种整数类型 int ,表示为长整型，没有 Python2 中的 Long bool(布尔) 如：True float（浮点数） 如：1.23、3E-2 complex（复数） 如：1 + 2j、1.1 + 2.2j 字符串（String） Python 中单引号和双引号使用完全相同。 使用三引号（&#39;&#39;&#39;或&quot;&quot;&quot;）可以指定一个多行字符串。 转义符\ 反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 按字面意义级联字符串。 字符串可以用 + 运算符连接在一起，用 * 运算符重复。 Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。 Python 中的字符串不能改变。 Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。 字符串的截取语法格式如下： 这里的 r 指 raw ，即 raw string。 1234567891011121314str = 'Runoob'print(str) # 输出字符串print(str[0:-1]) # 输出第一个到倒数第二个的所有字符print(str[0]) # 输出字符串第一个字符print(str[2:5]) # 输出从第三个开始到第五个的字符print(str[2:]) # 输出从第三个开始的后的所有字符print(str * 2) # 输出字符串两次print(str + 'Hello') # 连接字符串print('------------------------------')print('hello\nrunoob') # 使用反斜杠(\)+n转义特殊字符print(r'hello\nrunoob') # 在字符串前面添加一个 r，表示原始字符串，不会发生转义 输出结果为： 1234567891011RunoobRunooRnoonoobRunoobRunoobRunoob你好------------------------------hellorunoobhello\nrunoob 空行 函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。 空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。空行也是程序代码的一部分 等待用户输入 执行下面的程序在按回车键后就会等待用户输入。 以下代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。 1input("\n\n按下 Enter 键后退出程序。") 同一行显示多条语句 Python 可以在同一行中使用多条语句，语句之间使用分号;分割。 1import sys; x = 'runoob'; sys.stdout.write(x + '\n') 多个语句构成代码组 缩进相同的一组语句构成一个代码块，我们称之代码组。 像 if 、 while 、 def 和 class 这样的复合语句，首行以关键字开始，以冒号:结束，该行之后的一行或多行代码构成代码组。我们将首行及后面的代码组称为一个句子（Clause）。 123456if expression: suiteelif expression: suiteelse: suite Print 输出 Print 默认输出是换行的，如果要实现不换行需要在变量末尾加上end=&quot;&quot;。 12345678910111213x="a"y="b"# 换行输出print( x )print( y )print('---------')# 不换行输出print( x, end=" " )print( y, end=" " )print() 以上实例执行结果： 1234ab---------a b import 与 from import 在 Python 用import或者from import来导入相应的模块。 将整个模块(somemodule)导入。格式：import somemodule 从某个模块中导入某个函数。 格式：from somemodule import somefunction 从某个模块中导入多个函数。 格式为：from somemodule import firstfunc, secondfunc, thirdfunc 将某个模块中的全部函数导入。格式：from somemodule import 命令行参数 Python 提供了getout 模块来获取命令行参数。 1python test.py arg1 arg2 arg3 Python 中也可以所用 sys 的 sys.argv 来获取命令行参数 sys.argv 是命令行参数列表。 len(sys.argv) 是命令行参数个数。 注：sys.argv[0] 表示脚本名。 实例test.py 文件代码如下： 1234import sysprint ('参数个数为:', len(sys.argv), '个参数。')print ('参数列表:', str(sys.argv)) 执行以上代码，输出结果为： 123$ python3 test.py arg1 arg2 arg3参数个数为: 4 个参数。参数列表: ['test.py', 'arg1', 'arg2', 'arg3'] getopt模块 getopt模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式-和长选项模式--。 该模块提供了两个方法及一个异常处理来解析命令行参数。 getopt.getopt 方法 getopt.getopt 方法用于解析命令行参数列表，语法格式如下： 1getopt.getopt(args, options[, long_options]) 方法参数说明 args: 要解析的命令行参数列表。 options: 以字符串的格式定义，options后的冒号:表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。 long_options: 以列表的格式定义，long_options 后的等号=表示如果设置该选项，必须有附加的参数，否则就不附加参数。 该方法返回值由两个元素组成: 第一个是 (option, value) 元组的列表。 第二个是参数列表，包含那些没有-或--的参数。 Exception getopt.GetoptError 在没有找到参数列表，或选项的需要的参数为空时会触发该异常。 异常的参数是一个字符串，表示错误的原因。属性 msg 和 opt 为相关选项的错误信息。 实例 假定我们创建这样一个脚本，可以通过命令行向脚本文件传递两个文件名，同时我们通过另外一个选项查看脚本的使用。脚本使用方法如下: 1usage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt; test.py 文件代码如下所示： 1234567891011121314151617181920212223import sys, getoptdef main(argv): inputfile = '' outputfile = '' try: opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="]) except getopt.GetoptError: print ('test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;') sys.exit(2) for opt, arg in opts: if opt == '-h': print ('test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;') sys.exit() elif opt in ("-i", "--ifile"): inputfile = arg elif opt in ("-o", "--ofile"): outputfile = arg print ('输入的文件为：', inputfile) print ('输出的文件为：', outputfile)if __name__ == "__main__": main(sys.argv[1:]) 执行以上代码，输出结果为： 123456$ python3 test.py -husage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;$ python3 test.py -i inputfile -o outputfile输入的文件为： inputfile输出的文件为： outputfile]]></content>
      <categories>
        <category>编程之道</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
